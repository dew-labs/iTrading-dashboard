import React, { useMemo, useCallback, useState } from 'react'
import { FileText, Calendar, Scale, Lock, CheckCircle, Save, X, Plus, Languages, PenTool } from 'lucide-react'
import type { PostInsert, Image } from '../../../types'
import type { PostWithAuthor } from '../../../hooks/usePosts'
import { useFormValidation } from '../../../hooks/useFormValidation'
import { useFormTranslation, useTranslation } from '../../../hooks/useTranslation'
import { Button } from '../../atoms'
import { Select } from '../../molecules'
import { MainImageUpload } from '../images'
import { supabase } from '../../../lib/supabase'
import type { UploadResult } from '../../../hooks/useFileUpload'
import PostTranslationManager from '../translations/PostTranslationManager'
import { SUPPORTED_LANGUAGE_CODES } from '../../../constants/languages'
import type { LanguageCode } from '../../../types/translations'

// Move schema outside component to prevent re-renders
const POST_FORM_SCHEMA = {
  // Only non-translatable fields need validation here
  // title, excerpt, content are now handled in translations
} as const

interface PostFormProps {
  post?: PostWithAuthor | null
  onSubmit: (
    data: PostInsert,
    thumbnailImage?: (Partial<Image> & { file?: File }) | null,
    translations?: Array<{
      language_code: LanguageCode
      title: string
      excerpt: string
      content: string
      reading_time: number
    }>
  ) => void
  onCancel: () => void
  images?: Image[] | null
}

// Reading time is now calculated from content in translations

const PostForm: React.FC<PostFormProps> = ({ post, onSubmit, onCancel, images }) => {
  const { t: tForm } = useFormTranslation()
  const { t: tCommon } = useTranslation()
  const [_currentLanguage, setCurrentLanguage] = useState<LanguageCode>('en')
  const [postTranslations, setPostTranslations] = useState<Array<{
    language_code: LanguageCode
    title: string
    excerpt: string
    content: string
    reading_time: number
  }>>([])

  const [thumbnailImage, setThumbnailImage] = useState<
    (Partial<Image> & { publicUrl?: string; file?: File }) | null
  >(null)

  // Memoize initial data to prevent re-renders (only non-translatable fields)
  const initialData = useMemo(() => ({
    type: 'news' as PostWithAuthor['type'],
    status: 'draft' as PostWithAuthor['status'],
    author_id: null as string | null,
    views: 0
  }), [])

  // Enhanced form validation with our new hook
  const {
    data: formData,
    errors: _errors,
    isValidating,
    updateField,
    handleBlur: _handleBlur,
    handleChange: _handleChange,
    handleSubmit,
    reset
  } = useFormValidation({
    schema: POST_FORM_SCHEMA,
    initialData,
    validateOnBlur: true,
    validateOnChange: false
  })

  React.useEffect(() => {
    if (post) {
      reset({
        type: post.type,
        status: post.status,
        author_id: post.author_id,
        views: post.views || 0
      })

      const existingThumbnail = images?.find(
        img => img.record_id === post.id && img.type === 'thumbnail'
      )
      if (existingThumbnail) {
        const { data: urlData } = supabase.storage
          .from('posts')
          .getPublicUrl(existingThumbnail.path)
        setThumbnailImage({ ...existingThumbnail, publicUrl: urlData.publicUrl })
      } else {
        setThumbnailImage(null)
      }
    } else {
      reset(initialData)
      setThumbnailImage(null)
    }
  }, [post, reset, images, initialData])

  const handleThumbnailUpload = useCallback(
    (uploadResult: UploadResult | null, file?: File) => {
      if (uploadResult && file) {
        const { url: publicUrl, path, id: storageObjectId } = uploadResult
        setThumbnailImage(prev => ({
          ...prev,
          path,
          publicUrl,
          storage_object_id: storageObjectId,
          table_name: 'posts',
          record_id: post?.id || '',
          type: 'thumbnail',
          alt_text: `Post thumbnail`,
          file_size: file.size,
          mime_type: file.type,
          file
        }))
      } else {
        setThumbnailImage(null)
      }
    },
    [post?.id]
  )

  // Create type options with Badge component icons
  const typeOptions = useMemo(() => [
    {
      value: 'news',
      label: 'News',
      icon: <FileText className='w-4 h-4' />
    },
    {
      value: 'event',
      label: 'Event',
      icon: <Calendar className='w-4 h-4' />
    },
    {
      value: 'terms_of_use',
      label: 'Terms of Use',
      icon: <Scale className='w-4 h-4' />
    },
    {
      value: 'privacy_policy',
      label: 'Privacy Policy',
      icon: <Lock className='w-4 h-4' />
    }
  ], [])

  // Create status options with Badge component icons
  const statusOptions = useMemo(() => [
    {
      value: 'draft',
      label: 'Draft',
      icon: <PenTool className='w-4 h-4' />
    },
    {
      value: 'published',
      label: 'Published',
      icon: <CheckCircle className='w-4 h-4' />
    }
  ], [])

  const handleFormSubmit = useCallback((data: typeof formData) => {
    onSubmit(
      data as PostInsert,
      thumbnailImage,
      postTranslations
    )
  }, [onSubmit, thumbnailImage, postTranslations])

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-8">
      {/* Main Layout Grid */}
      <div className="grid grid-cols-1 xl:grid-cols-4 gap-8">

        {/* Left Sidebar - Settings & Media */}
        <div className="xl:col-span-1 space-y-6">

          {/* Post Settings Card */}
          <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 shadow-sm">
            <div className="flex items-center space-x-2 mb-4">
              <FileText className="w-5 h-5 text-gray-600 dark:text-gray-400" />
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Post Settings</h3>
            </div>

            <div className="space-y-4">
              {/* Type Selection */}
              <Select
                label={tForm('labels.type')}
                required
                value={formData.type || 'news'}
                onChange={value => updateField('type', value as PostWithAuthor['type'])}
                options={typeOptions}
                disabled={isValidating}
              />

              {/* Status Selection */}
              <Select
                label={tForm('labels.status')}
                required
                value={formData.status || 'draft'}
                onChange={value => updateField('status', value as PostWithAuthor['status'])}
                options={statusOptions}
                disabled={isValidating}
              />


            </div>
          </div>

          {/* Thumbnail Upload Card */}
          <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 shadow-sm">
            <div className="flex items-center space-x-2 mb-4">
              <Calendar className="w-5 h-5 text-gray-600 dark:text-gray-400" />
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Thumbnail Image</h3>
            </div>

            <MainImageUpload
              label=""
              imageUrl={
                thumbnailImage?.publicUrl && thumbnailImage.publicUrl.trim() !== ''
                  ? thumbnailImage.publicUrl
                  : thumbnailImage?.path && thumbnailImage.path.trim() !== ''
                    ? thumbnailImage.path
                    : null
              }
              onChange={handleThumbnailUpload}
              bucket="posts"
              folder="thumbnails"
              size="lg"
              disabled={isValidating}
              recommendationText={tForm('hints.thumbnailRecommendation')}
              alt="Post thumbnail"
            />
          </div>
        </div>

        {/* Right Main Content - Translations */}
        <div className="xl:col-span-3 space-y-6">

          {/* Content & Translations Card */}
          <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 shadow-sm">
            <div className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Languages className="w-5 h-5 text-gray-600 dark:text-gray-400" />
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Content & Translations</h3>
                </div>
                {post && (
                  <div id="translation-status-container" className="flex items-center">
                    {/* Translation status will be rendered here by TranslationManager */}
                  </div>
                )}
              </div>
            </div>

            <div className="p-6">
              <PostTranslationManager
                postId={post?.id || null}
                defaultLanguage="en"
                requiredLanguages={SUPPORTED_LANGUAGE_CODES}
                onLanguageChange={setCurrentLanguage}
                onTranslationsReady={setPostTranslations}
                className="border-0 p-0 bg-transparent"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex justify-end items-center space-x-4 pt-6 border-t border-gray-200 dark:border-gray-700">
        <Button
          type="button"
          variant="ghost"
          onClick={onCancel}
          leftIcon={X}
          disabled={isValidating}
          className="px-6"
        >
          {tCommon('actions.cancel')}
        </Button>

        <Button
          type="submit"
          variant="primary"
          disabled={isValidating}
          {...(!isValidating && { leftIcon: post ? Save : Plus })}
          className="px-8"
        >
          {isValidating ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2" />
              {post ? tCommon('feedback.updating') : tCommon('feedback.creating')}
            </>
          ) : (
            <>
              {post ? `${tCommon('actions.update')} ${tCommon('entities.post')}` : `${tCommon('actions.create')} ${tCommon('entities.post')}`}
            </>
          )}
        </Button>
      </div>
    </form>
  )
}

export default PostForm
